1. 编解码器Codec
2. 解码器
1. ByteToMessageDecoder
2. ReplayingDecoder
3. MessageToMessageDecoder
4. 解码器总结
3. 编码器
1. MessageToByteEncoder
2. MessageToMessageEncoder
4. 编解码器
1. byte-to-byte编解码器
2. ByteToMessageCodec
3. MessageToMessageCodec
5. 其他编解码方式
1. CombinedChannelDuplexHandler
本章介绍
Codec,编解码器 Decoder,解码器 Encoder,编码器
Netty提供了编解码器框架,使得编写自定义的编解码器很容易,并且也很容易重用和封装。本章讨论Netty的编解码器框架以及使 用。

7.1 编解码器Codec 编写一个网络应用程序需要实现某种编解码器,编解码器的作用就是讲原始字节数据与自定义的消息对象进行互转。网络中都是以
字节码的数据形式来传输数据的,服务器编码数据后发送到客户端,客户端需要对数据进行解码,因为编解码器由两部分组成: Decoder(解码器)
Encoder(编码器)
解码器负责将消息从字节或其他序列形式转成指定的消息对象,编码器则相反;解码器负责处理“入站”数据,编码器负责处理“出站” 数据。编码器和解码器的结构很简单,消息被编码后解码后会自动通过ReferenceCountUtil.release(message)释放,如果不想释放消息 可以使用ReferenceCountUtil.retain(message),这将会使引用数量增加而没有消息发布,大多数时候不需要这么做。
7.2 解码器
netty提供了丰富的解码器抽象基类,我们可以很容易的实现这些基类来自定义解码器。下面是解码器的一个类型:
   解码字节到消息
   解码消息到消息
   解码消息到字节

   本章将概述不同的抽象基类,来帮助了解解码器的实现。深入了解Netty提供的解码器之前先了解解码器的作用是什么?
   解码器负责 解码“入站”数据从一种格式到另一种格式,解码器处理入站数据是抽象ChannelInboundHandler的实现。
   实践中使用解码器很简单,就是 将入站数据转换格式后传递到ChannelPipeline中的下一个ChannelInboundHandler进行处理;
   这样的处理时很灵活的,我们可以将解码器 放在ChannelPipeline中,重用逻辑。

   7.2.1 ByteToMessageDecoder
   通常你需要将消息从字节解码成消息或者从字节解码成其他的序列化字节。这是一个常见的任务,Netty提供了抽象基类,我们可以 使用它们来实现。Netty中提供的ByteToMessageDecoder可以将字节消息解码成POJO对象,下面列出了ByteToMessageDecoder两个 主要方法:
   decode(ChannelHandlerContext, ByteBuf, List<Object>),这个方法是唯一的一个需要自己实现的抽象方法,作用是将ByteBuf数 据解码成其他形式的数据。
   decodeLast(ChannelHandlerContext, ByteBuf, List<Object>),实际上调用的是decode(...)。

   例如服务器从某个客户端接收到一个整数值的字节码,服务器将数据读入ByteBuf并经过ChannelPipeline中的每个 ChannelInboundHandler进行处理,看下图:

   上图显示了从“入站”ByteBuf读取bytes后由ToIntegerDecoder进行解码,然后向解码后的消息传递到ChannelPipeline中的下一个 ChannelInboundHandler。看下面ToIntegerDecoder的实现代码: